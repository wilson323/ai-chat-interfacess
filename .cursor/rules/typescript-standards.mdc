---
alwaysApply: true
description: TypeScript编码标准和最佳实践
---

# TypeScript编码标准

## 核心原则
- 严格类型检查，禁止使用`any`类型
- 使用camelCase命名变量和函数
- 优先使用命名导出而非默认导出
- 使用`Array<T>`而非`T[]`语法
- 始终启用严格模式（strict: true）

## 命名规范
- **变量和函数**: `camelCase`
- **类名**: `PascalCase`
- **常量**: `UPPER_SNAKE_CASE`
- **接口**: `PascalCase`，以I开头
- **类型别名**: `PascalCase`
- **枚举**: `PascalCase`

## 导入导出规范
```typescript
// ✅ 正确：命名导出
export const userService = { ... };
export function validateUser() { ... };

// ❌ 错误：默认导出
export default userService;

// ✅ 正确：导入顺序
import React from 'react';
import { NextRequest } from 'next/server';
import { userService } from '@/lib/services';
import { Button } from '@/components/ui';
```

## 错误处理要求
- 所有函数必须添加错误处理
- 使用try-catch包装异步操作
- 提供有意义的错误信息
- 复杂函数必须添加JSDoc注释

## 类型安全要求
- 禁止使用`any`类型（除非绝对必要）
- 使用严格的null检查
- 确保所有props都有明确的类型定义
- 使用泛型提高代码复用性

参考配置文件：[tsconfig.json](mdc:tsconfig.json)
---
description: 代码结构规范和目录组织标准
globs: ["**/*.{ts,tsx,js,jsx}"]
alwaysApply: true
---

# 代码结构规范

## 📁 目录结构标准

### 根目录结构
```
ai-chat-interface/
├── app/                    # Next.js App Router (页面和API)
├── components/            # React组件库
├── lib/                   # 核心业务逻辑
├── types/                 # TypeScript类型定义
├── context/               # React Context
├── hooks/                 # 自定义Hooks
├── config/                # 配置文件
├── public/                # 静态资源
├── styles/                # 全局样式
├── tests/                 # 测试文件
├── docs/                  # 项目文档
└── scripts/               # 构建和工具脚本
```

### 详细目录说明

#### `/app` - Next.js App Router
```
app/
├── admin/                 # 管理员页面
│   ├── page.tsx          # 管理员首页
│   ├── agents/           # 智能体管理
│   ├── users/            # 用户管理
│   └── settings/         # 系统设置
├── api/                  # API路由
│   ├── auth/             # 认证相关API
│   ├── agents/           # 智能体API
│   ├── chat/             # 对话API
│   └── upload/           # 文件上传API
├── user/                 # 用户页面
│   ├── page.tsx          # 用户首页
│   ├── chat/             # 对话页面
│   └── settings/         # 用户设置
├── layout.tsx            # 根布局
└── page.tsx              # 首页
```

#### `/components` - React组件
```
components/
├── admin/                # 管理员专用组件
├── ui/                   # 基础UI组件 (shadcn/ui)
├── shared/               # 共享组件
├── chat/                 # 对话相关组件
├── voice/                # 语音相关组件
├── image-editor/         # 图像编辑组件
├── cad-analyzer/         # CAD分析组件
└── index.ts              # 组件导出
```

#### `/lib` - 核心业务逻辑
```
lib/
├── api/                  # API客户端
├── db/                   # 数据库相关
│   ├── models/           # Sequelize模型
│   ├── migrations/       # 数据库迁移
│   └── sequelize.ts      # 数据库配置
├── services/             # 业务服务
├── config/               # 配置管理
├── middleware/           # 中间件
├── storage/              # 存储相关
├── utils/                # 工具函数
└── index.ts              # 库导出
```

## 📝 文件命名规范

### 文件命名规则
- **组件文件**: PascalCase (如: `UserProfile.tsx`)
- **工具文件**: camelCase (如: `formatDate.ts`)
- **配置文件**: kebab-case (如: `api-config.json`)
- **类型文件**: kebab-case (如: `user-types.ts`)
- **测试文件**: `*.test.ts` 或 `*.spec.ts`

### 目录命名规则
- **功能目录**: kebab-case (如: `user-profile/`)
- **组件目录**: kebab-case (如: `chat-container/`)
- **工具目录**: kebab-case (如: `date-utils/`)

## 🏗️ 组件结构规范

### 组件文件结构
```typescript
// 1. 导入顺序
import React from 'react'
import { NextPage } from 'next'
import { useRouter } from 'next/router'

// 第三方库
import { Button } from '@/components/ui/button'
import { Card } from '@/components/ui/card'

// 本地导入
import { useAuth } from '@/hooks/useAuth'
import { UserService } from '@/lib/services/user-service'

// 类型导入
import type { User, UserProps } from '@/types/user'

// 2. 接口定义
interface ComponentProps {
  userId: string
  onUpdate?: (user: User) => void
}

// 3. 组件实现
export function UserProfile({ userId, onUpdate }: ComponentProps) {
  // 组件逻辑
}

// 4. 默认导出
export default UserProfile
```

### 组件组织原则
1. **单一职责**: 每个组件只负责一个功能
2. **可复用性**: 组件设计要考虑复用
3. **可测试性**: 组件要易于测试
4. **可维护性**: 代码结构清晰，易于维护

## 🔧 代码组织规范

### 导入顺序
```typescript
// 1. React相关
import React, { useState, useEffect } from 'react'

// 2. Next.js相关
import { NextPage, GetServerSideProps } from 'next'
import { useRouter } from 'next/router'

// 3. 第三方库 (按字母顺序)
import { Button } from '@/components/ui/button'
import { Card } from '@/components/ui/card'
import { toast } from 'react-hot-toast'

// 4. 内部模块 (按路径深度)
import { useAuth } from '@/hooks/useAuth'
import { UserService } from '@/lib/services/user-service'
import { formatDate } from '@/lib/utils/date-utils'

// 5. 类型导入
import type { User, UserProps } from '@/types/user'
```

### 函数组织
```typescript
// 1. 工具函数
function formatUserName(user: User): string {
  return `${user.firstName} ${user.lastName}`
}

// 2. 事件处理函数
function handleUserClick(userId: string): void {
  // 处理逻辑
}

// 3. 副作用函数
function useUserData(userId: string) {
  // Hook逻辑
}

// 4. 主组件
export function UserProfile({ userId }: UserProps) {
  // 组件逻辑
}
```

## 📦 模块导出规范

### 统一导出文件
每个目录都应该有一个 `index.ts` 文件用于统一导出：

```typescript
// components/index.ts
export { Button } from './ui/button'
export { Card } from './ui/card'
export { UserProfile } from './user-profile'
export { ChatContainer } from './chat-container'

// lib/index.ts
export { UserService } from './services/user-service'
export { AuthService } from './services/auth-service'
export { formatDate } from './utils/date-utils'
export { validateEmail } from './utils/validation'
```

### 导出原则
- **命名导出**: 优先使用命名导出
- **默认导出**: 仅用于页面组件
- **类型导出**: 使用 `export type` 导出类型
- **统一导出**: 通过 `index.ts` 统一管理

## 🎯 代码质量要求

### TypeScript规范
```typescript
// ✅ 正确示例
interface UserProps {
  id: string
  name: string
  email: string
  isActive: boolean
}

// ❌ 错误示例
interface UserProps {
  id: any
  name: any
  email: any
  isActive: any
}
```

### 组件规范
```typescript
// ✅ 正确示例
interface ButtonProps {
  variant?: 'primary' | 'secondary' | 'danger'
  size?: 'sm' | 'md' | 'lg'
  disabled?: boolean
  children: React.ReactNode
  onClick?: () => void
}

export function Button({ 
  variant = 'primary', 
  size = 'md', 
  disabled = false,
  children,
  onClick 
}: ButtonProps) {
  return (
    <button
      className={`btn btn-${variant} btn-${size}`}
      disabled={disabled}
      onClick={onClick}
    >
      {children}
    </button>
  )
}
```

## 🧪 测试文件组织

### 测试文件结构
```
tests/
├── unit/                 # 单元测试
│   ├── components/       # 组件测试
│   ├── services/         # 服务测试
│   └── utils/            # 工具函数测试
├── integration/          # 集成测试
│   ├── api/              # API测试
│   └── database/         # 数据库测试
└── e2e/                  # 端到端测试
    ├── user-flow/        # 用户流程测试
    └── admin-flow/       # 管理员流程测试
```

### 测试文件命名
- **单元测试**: `*.test.ts`
- **集成测试**: `*.integration.test.ts`
- **E2E测试**: `*.e2e.test.ts`

## 📋 代码审查清单

### 结构检查
- [ ] 文件命名符合规范
- [ ] 目录结构清晰合理
- [ ] 导入顺序正确
- [ ] 导出规范统一

### 质量检查
- [ ] TypeScript类型完整
- [ ] 组件接口清晰
- [ ] 函数职责单一
- [ ] 代码可读性好

### 测试检查
- [ ] 测试文件完整
- [ ] 测试覆盖充分
- [ ] 测试用例清晰
- [ ] 测试数据合理

---

## ⚠️ 重要提醒

1. **严格遵循**: 所有代码必须遵循本规范
2. **持续检查**: 通过工具自动检查代码结构
3. **及时修复**: 发现违规立即修复
4. **文档同步**: 结构变更及时更新文档

**记住: 好的代码结构是高质量代码的基础！**
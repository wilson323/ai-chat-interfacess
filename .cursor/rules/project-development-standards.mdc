---
description: NeuroGlass AI Chat Interface 项目开发标准与规范
globs: ["**/*.{ts,tsx,js,jsx,json,md}"]
alwaysApply: true
---

# NeuroGlass AI Chat Interface - 项目开发标准

## 🎯 核心使命

**确保项目达到生产级别的高质量交付，实现高质量、高体验、高可用的企业级多智能体对话平台。**

## 📋 开发原则

### 1. 代码质量至上
- **TypeScript严格模式**: 禁止使用`any`类型，确保100%类型安全
- **零容忍错误**: 所有代码必须通过ESLint、Prettier、TypeScript检查
- **DRY原则**: 严格禁止代码重复，优先复用现有组件
- **单一职责**: 每个函数/组件只负责一个功能
- **错误处理**: 所有函数必须有完整的错误处理机制

### 2. 架构一致性
- **统一配置管理**: 所有配置必须通过中央配置系统管理
- **统一错误处理**: 使用全局错误处理中间件
- **统一API设计**: 所有API必须遵循统一响应格式
- **统一组件接口**: 所有组件必须遵循统一的Props接口规范

### 3. 性能与安全
- **性能基准**: 首屏加载<1s，API响应<300ms
- **安全第一**: 输入验证、输出编码、权限控制必须完善
- **内存管理**: 严格防止内存泄漏
- **资源优化**: 图片、代码分割、懒加载必须优化

## 🚫 严格禁止

### 代码质量禁止项
- ❌ **禁止使用any类型**
- ❌ **禁止未处理的Promise**
- ❌ **禁止硬编码配置**
- ❌ **禁止未注释的复杂逻辑**
- ❌ **禁止重复代码**
- ❌ **禁止功能重复**

### 安全禁止项
- ❌ **禁止明文存储密码**
- ❌ **禁止跳过输入验证**
- ❌ **禁止暴露敏感信息**
- ❌ **禁止使用不安全的依赖**

### 性能禁止项
- ❌ **禁止同步阻塞操作**
- ❌ **禁止内存泄漏**
- ❌ **禁止过大的bundle文件**
- ❌ **禁止未优化的图片**

## 📁 目录结构规范

```
ai-chat-interface/
├── app/                    # Next.js App Router
│   ├── admin/             # 管理员界面
│   ├── api/               # API路由
│   └── user/              # 用户界面
├── components/            # React组件
│   ├── admin/            # 管理员组件
│   ├── ui/               # 基础UI组件
│   ├── shared/           # 共享组件
│   └── [feature]/        # 功能组件
├── lib/                  # 核心库
│   ├── api/              # API客户端
│   ├── db/               # 数据库模型
│   ├── services/         # 业务服务
│   ├── config/           # 配置管理
│   └── middleware/       # 中间件
├── types/                # TypeScript类型定义
├── context/              # React Context
├── hooks/                # 自定义Hooks
└── tests/                # 测试文件
```

## 🔧 技术规范

### TypeScript规范
```typescript
// ✅ 正确示例
interface UserProps {
  id: string
  name: string
  email: string
  isActive: boolean
}

// ❌ 错误示例
interface UserProps {
  id: any
  name: any
  email: any
  isActive: any
}
```

### 组件规范
```typescript
// ✅ 正确示例
interface ButtonProps {
  variant?: 'primary' | 'secondary' | 'danger'
  size?: 'sm' | 'md' | 'lg'
  disabled?: boolean
  children: React.ReactNode
  onClick?: () => void
}

export function Button({ variant = 'primary', size = 'md', ...props }: ButtonProps) {
  // 组件实现
}
```

### API规范
```typescript
// ✅ 统一响应格式
interface ApiResponse<T = any> {
  success: boolean
  data?: T
  error?: {
    code: string
    message: string
    details?: any
  }
  meta?: {
    timestamp: string
    requestId: string
  }
}
```

## 🧪 测试要求

### 测试覆盖率
- **单元测试覆盖率**: ≥ 80%
- **集成测试覆盖率**: ≥ 60%
- **关键业务逻辑覆盖率**: ≥ 90%

### 测试命令
```bash
# 运行所有测试
npm test

# 运行单元测试
npm run test:unit

# 运行集成测试
npm run test:integration

# 运行E2E测试
npm run test:e2e

# 生成覆盖率报告
npm run test:coverage
```

## 📝 提交规范

### Commit Message格式
```
<type>(<scope>): <subject>

<body>

<footer>
```

### 类型说明
- **feat**: 新功能
- **fix**: Bug修复
- **docs**: 文档更新
- **style**: 代码格式
- **refactor**: 代码重构
- **test**: 测试相关
- **chore**: 构建/工具

### 示例
```bash
# ✅ 好的提交
git commit -m "feat(chat): add real-time message streaming

- Implement SSE for real-time message delivery
- Add message status indicators
- Handle connection errors gracefully

Closes #123"

# ❌ 不好的提交
git commit -m "fix bug"
git commit -m "update code"
```

## 🔍 代码审查清单

### 必须检查项
- [ ] 代码符合TypeScript严格模式
- [ ] 没有使用any类型
- [ ] 错误处理完善
- [ ] 没有重复代码
- [ ] 组件接口统一
- [ ] API响应格式统一
- [ ] 测试覆盖充分
- [ ] 性能影响评估
- [ ] 安全风险检查

### 质量门禁
- [ ] ESLint检查通过
- [ ] Prettier格式化通过
- [ ] TypeScript类型检查通过
- [ ] 单元测试通过
- [ ] 集成测试通过
- [ ] 性能测试通过

## 🚀 部署要求

### 部署前检查
- [ ] 所有测试通过
- [ ] 代码审查完成
- [ ] 文档更新完成
- [ ] 环境变量配置正确
- [ ] 数据库迁移脚本准备

### 部署后验证
- [ ] 应用启动正常
- [ ] 健康检查通过
- [ ] 关键功能验证
- [ ] 性能指标正常
- [ ] 错误日志检查

## 📊 质量指标

### 代码质量指标
- 圈复杂度 ≤ 10
- 函数长度 ≤ 50行
- 文件长度 ≤ 500行
- 重复代码率 ≤ 3%

### 性能指标
- 首屏加载时间 ≤ 3秒
- API响应时间 ≤ 500ms
- 内存使用率 ≤ 80%
- 包体积增长 ≤ 10%

## 🛡️ 安全要求

### 输入验证
- 所有用户输入必须验证
- 使用Zod进行参数验证
- 防止SQL注入和XSS攻击

### 权限控制
- 基于角色的访问控制
- JWT令牌认证
- API权限验证

### 数据保护
- 敏感数据加密存储
- HTTPS传输
- 日志脱敏

## 📚 文档要求

### 代码文档
- 所有公共函数必须有JSDoc注释
- 复杂逻辑必须有行内注释
- README文件必须保持最新

### API文档
- 所有API必须有完整文档
- 包含请求/响应示例
- 包含错误码说明

## 🔄 持续改进

### 代码重构
- 定期重构重复代码
- 优化性能瓶颈
- 提升代码可读性

### 技术债务
- 及时修复技术债务
- 定期更新依赖
- 保持代码现代化

---

## ⚠️ 重要提醒

1. **严格遵循**: 所有开发人员必须严格遵循本规范
2. **零容忍**: 对违反规范的行为零容忍
3. **持续检查**: 通过自动化工具持续检查代码质量
4. **及时修复**: 发现问题必须立即修复
5. **文档同步**: 代码变更必须同步更新文档

**记住: 质量不是检查出来的，而是设计出来的。每个开发者都有责任确保代码质量。**
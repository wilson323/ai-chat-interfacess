# 注释规范标准

## 🎯 注释规范原则

### 1. 注释完整性要求
- **JSDoc注释**: 所有公共方法必须有完整的JSDoc注释
- **行内注释**: 复杂业务逻辑必须有详细的行内注释
- **类型注释**: 所有类型定义必须有详细说明
- **示例代码**: 复杂方法必须提供使用示例

### 2. 注释质量标准
- **准确性**: 注释必须与实际代码逻辑一致
- **完整性**: 注释必须覆盖所有重要信息
- **可读性**: 注释必须清晰易懂
- **时效性**: 代码变更时必须同步更新注释

## 📋 具体注释规范

### 1. JSDoc注释标准

#### 基础JSDoc格式
```typescript
/**
 * 创建新的对话会话
 * @description 初始化新的聊天会话，重置相关状态，触发新对话事件
 * @returns {void}
 * @example
 * ```typescript
 * createNewConversation()
 * ```
 * @since 1.0.0
 * @author 开发团队
 */
function createNewConversation(): void {
  // 实现逻辑
}
```

#### 带参数的JSDoc
```typescript
/**
 * 验证消息内容
 * @param content - 要验证的消息内容
 * @param maxLength - 最大长度限制，默认为1000
 * @returns 验证结果，包含是否有效和错误信息
 * @throws {ValidationError} 当内容格式不正确时抛出
 * @example
 * ```typescript
 * const result = validateMessageContent("Hello world", 500)
 * if (result.isValid) {
 *   console.log("消息有效")
 * }
 * ```
 * @since 1.0.0
 * @author 开发团队
 */
function validateMessageContent(content: string, maxLength: number = 1000): ValidationResult {
  // 实现逻辑
}
```

#### 异步方法JSDoc
```typescript
/**
 * 发送聊天消息到FastGPT API
 * @param message - 要发送的消息内容
 * @param agentId - 智能体ID
 * @param sessionId - 会话ID
 * @returns Promise<MessageResponse> 返回消息响应
 * @throws {ApiError} 当API调用失败时抛出
 * @throws {ValidationError} 当消息格式不正确时抛出
 * @example
 * ```typescript
 * try {
 *   const response = await sendChatMessage("Hello", "agent-1", "session-1")
 *   console.log("消息发送成功:", response)
 * } catch (error) {
 *   console.error("发送失败:", error.message)
 * }
 * ```
 * @since 1.0.0
 * @author 开发团队
 */
async function sendChatMessage(
  message: string, 
  agentId: string, 
  sessionId: string
): Promise<MessageResponse> {
  // 实现逻辑
}
```

### 2. 类型定义注释

#### 接口注释
```typescript
/**
 * 智能体配置接口
 * @description 定义智能体的基本配置信息，包括API配置、模型参数等
 * @interface AgentConfig
 * @since 1.0.0
 */
export interface AgentConfig {
  /** 智能体唯一标识符 */
  id: string
  
  /** 智能体显示名称 */
  name: string
  
  /** 
   * 智能体类型
   * @description 支持的类型：fastgpt | cad-analyzer | image-editor
   */
  type: AgentType
  
  /** API密钥，用于身份验证 */
  apiKey: string
  
  /** 应用ID，用于API调用 */
  appId: string
  
  /** 
   * API端点URL
   * @description 默认为FastGPT API，可以为每个智能体单独配置
   */
  apiUrl?: string
  
  /** 
   * 系统提示词
   * @description 定义智能体行为的基础提示词
   */
  systemPrompt: string
  
  /** 
   * 温度参数
   * @description 控制回复的随机性，范围0-1，值越高越随机
   */
  temperature: number
  
  /** 
   * 最大令牌数
   * @description 限制单次回复的最大长度
   */
  maxTokens: number
  
  /** 
   * 多模态模型名称
   * @description 用于图像处理的模型名称
   */
  multimodalModel?: string
  
  /** 
   * 是否已发布
   * @description 控制智能体在用户端的可见性
   */
  isPublished: boolean
  
  /** 智能体描述信息 */
  description?: string
  
  /** 
   * 显示顺序
   * @description 用于智能体列表排序，数值越小越靠前
   */
  order: number
  
  /** 
   * 是否支持流式响应
   * @description 控制是否支持实时流式输出
   */
  supportsStream: boolean
  
  /** 
   * 是否支持详细模式
   * @description 控制是否显示详细的处理过程
   */
  supportsDetail: boolean
  
  /** 
   * 全局变量配置
   * @description JSON字符串格式，存储用户需要填写的全局变量
   */
  globalVariables?: string
  
  /** 
   * 欢迎语
   * @description 用户首次使用时的提示信息
   */
  welcomeText?: string
  
  /** 最后更新时间 */
  updatedAt?: Date
}
```

#### 枚举注释
```typescript
/**
 * 智能体类型枚举
 * @description 定义系统中支持的所有智能体类型
 * @enum {string}
 * @since 1.0.0
 */
export enum AgentType {
  /** FastGPT对话智能体 */
  FASTGPT = 'fastgpt',
  
  /** CAD解读智能体 */
  CAD_ANALYZER = 'cad-analyzer',
  
  /** 图像编辑智能体 */
  IMAGE_EDITOR = 'image-editor'
}

/**
 * 消息角色枚举
 * @description 定义聊天消息的角色类型
 * @enum {string}
 * @since 1.0.0
 */
export enum MessageRole {
  /** 用户消息 */
  USER = 'user',
  
  /** AI助手消息 */
  ASSISTANT = 'assistant',
  
  /** 系统消息 */
  SYSTEM = 'system'
}
```

### 3. 行内注释标准

#### 业务逻辑注释
```typescript
function processUserInput(input: string): void {
  // 输入验证：检查是否为空或只包含空白字符
  if (!input || input.trim().length === 0) {
    throw new Error("输入不能为空")
  }

  // 安全处理：清理潜在的恶意内容，防止XSS攻击
  const sanitizedInput = sanitizeInput(input)
  
  // 业务逻辑：根据输入类型进行不同的处理
  if (isFileInput(sanitizedInput)) {
    // 文件输入处理：验证文件类型、大小等
    handleFileInput(sanitizedInput)
  } else if (isTextInput(sanitizedInput)) {
    // 文本输入处理：直接发送到AI模型
    handleTextInput(sanitizedInput)
  } else {
    // 未知输入类型：记录日志并提示用户
    console.warn("未知输入类型:", sanitizedInput)
    throw new Error("不支持的输入类型")
  }
}
```

#### 算法逻辑注释
```typescript
function calculateAgentPriority(agent: AgentConfig): number {
  // 基础优先级：根据order字段计算
  let priority = agent.order
  
  // 类型权重：不同类型智能体有不同的基础权重
  const typeWeights = {
    'fastgpt': 1.0,      // 对话智能体权重最高
    'cad-analyzer': 0.8,  // CAD分析器权重中等
    'image-editor': 0.6   // 图像编辑器权重较低
  }
  
  priority *= typeWeights[agent.type] || 1.0
  
  // 状态权重：已发布的智能体优先级更高
  if (agent.isPublished) {
    priority *= 1.2
  }
  
  // 使用频率权重：根据历史使用次数调整
  const usageCount = getAgentUsageCount(agent.id)
  priority *= Math.log(usageCount + 1) + 1
  
  return Math.round(priority)
}
```

#### 错误处理注释
```typescript
async function handleApiRequest(url: string, options: RequestInit): Promise<Response> {
  try {
    // 发送HTTP请求
    const response = await fetch(url, options)
    
    // 检查响应状态码
    if (!response.ok) {
      // 4xx错误：客户端错误，不重试
      if (response.status >= 400 && response.status < 500) {
        throw new ClientError(`客户端错误: ${response.status}`, response.status)
      }
      
      // 5xx错误：服务器错误，可以重试
      if (response.status >= 500) {
        throw new ServerError(`服务器错误: ${response.status}`, response.status)
      }
    }
    
    return response
  } catch (error) {
    // 网络错误：连接超时、网络中断等
    if (error instanceof TypeError && error.message.includes('fetch')) {
      throw new NetworkError('网络连接失败', error)
    }
    
    // 其他错误：重新抛出
    throw error
  }
}
```

### 4. 组件注释规范

#### React组件注释
```typescript
/**
 * 聊天消息组件
 * @description 用于显示单条聊天消息，支持用户消息和AI回复
 * @param message - 消息对象
 * @param onCopy - 复制消息的回调函数
 * @param onEdit - 编辑消息的回调函数（仅用户消息）
 * @param onDelete - 删除消息的回调函数（仅用户消息）
 * @returns JSX元素
 * @example
 * ```tsx
 * <ChatMessage 
 *   message={message} 
 *   onCopy={handleCopy}
 *   onEdit={handleEdit}
 *   onDelete={handleDelete}
 * />
 * ```
 * @since 1.0.0
 * @author 开发团队
 */
export function ChatMessage({ 
  message, 
  onCopy, 
  onEdit, 
  onDelete 
}: ChatMessageProps) {
  // 状态管理：控制消息的展开/收起状态
  const [isExpanded, setIsExpanded] = useState(false)
  
  // 事件处理：复制消息内容到剪贴板
  const handleCopy = useCallback(() => {
    navigator.clipboard.writeText(message.content)
    onCopy?.(message.id)
  }, [message.content, message.id, onCopy])
  
  // 渲染逻辑：根据消息类型渲染不同的UI
  return (
    <div className={`message ${message.role}`}>
      {/* 消息头部：显示角色和时间 */}
      <div className="message-header">
        <span className="role">{message.role}</span>
        <span className="timestamp">{formatTime(message.timestamp)}</span>
      </div>
      
      {/* 消息内容：支持Markdown渲染 */}
      <div className="message-content">
        <MarkdownRenderer content={message.content} />
      </div>
      
      {/* 消息操作：复制、编辑、删除按钮 */}
      <div className="message-actions">
        <Button onClick={handleCopy}>复制</Button>
        {message.role === 'user' && (
          <>
            <Button onClick={() => onEdit?.(message.id)}>编辑</Button>
            <Button onClick={() => onDelete?.(message.id)}>删除</Button>
          </>
        )}
      </div>
    </div>
  )
}
```

### 5. Hook注释规范

#### 自定义Hook注释
```typescript
/**
 * 聊天状态管理Hook
 * @description 管理聊天相关的状态，包括消息列表、输入状态、发送状态等
 * @param agentId - 当前智能体ID
 * @param sessionId - 当前会话ID
 * @returns 聊天状态和操作方法
 * @example
 * ```tsx
 * const {
 *   messages,
 *   input,
 *   isLoading,
 *   sendMessage,
 *   clearMessages
 * } = useChatState('agent-1', 'session-1')
 * ```
 * @since 1.0.0
 * @author 开发团队
 */
export function useChatState(agentId: string, sessionId: string) {
  // 状态定义：消息列表、输入内容、加载状态
  const [messages, setMessages] = useState<Message[]>([])
  const [input, setInput] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  
  // 副作用：加载历史消息
  useEffect(() => {
    loadChatHistory(sessionId).then(setMessages)
  }, [sessionId])
  
  // 方法定义：发送消息
  const sendMessage = useCallback(async (content: string) => {
    if (!content.trim() || isLoading) return
    
    setIsLoading(true)
    
    try {
      // 添加用户消息到列表
      const userMessage: Message = {
        id: generateId(),
        role: 'user',
        content,
        timestamp: new Date()
      }
      setMessages(prev => [...prev, userMessage])
      
      // 发送到API并获取回复
      const response = await sendMessageToAPI(content, agentId, sessionId)
      
      // 添加AI回复到列表
      const aiMessage: Message = {
        id: generateId(),
        role: 'assistant',
        content: response.content,
        timestamp: new Date()
      }
      setMessages(prev => [...prev, aiMessage])
      
    } catch (error) {
      console.error('发送消息失败:', error)
      // 显示错误提示
    } finally {
      setIsLoading(false)
    }
  }, [agentId, sessionId, isLoading])
  
  return {
    messages,
    input,
    setInput,
    isLoading,
    sendMessage,
    clearMessages: () => setMessages([])
  }
}
```

## 🛠️ 注释工具配置

### 1. ESLint注释规则
```json
{
  "rules": {
    "jsdoc/require-jsdoc": [
      "error",
      {
        "require": {
          "FunctionDeclaration": true,
          "MethodDefinition": true,
          "ClassDeclaration": true,
          "ArrowFunctionExpression": true,
          "FunctionExpression": true
        }
      }
    ],
    "jsdoc/require-description": "error",
    "jsdoc/require-param": "error",
    "jsdoc/require-returns": "error",
    "jsdoc/require-example": "warn",
    "jsdoc/check-tag-names": "error",
    "jsdoc/check-types": "error"
  }
}
```

### 2. 注释检查脚本
```typescript
// scripts/check-comments.ts
import { execSync } from 'child_process'

function checkComments() {
  try {
    // 运行ESLint检查注释
    execSync('npx eslint --ext .ts,.tsx --rule "jsdoc/require-jsdoc: error" src/', {
      stdio: 'inherit'
    })
    
    console.log('✅ 注释检查通过')
  } catch (error) {
    console.error('❌ 注释检查失败:', error.message)
    process.exit(1)
  }
}

checkComments()
```

## 📊 注释质量指标

### 注释覆盖率要求
- **公共方法注释率**: 目标 100%
- **复杂逻辑注释率**: 目标 90%
- **类型定义注释率**: 目标 100%
- **示例代码覆盖率**: 目标 80%

### 检查命令
```bash
# 注释规范检查
npm run check:comments

# 生成注释报告
npm run report:comments

# 自动修复注释格式
npm run fix:comments
```

## ⚠️ 重要提醒

1. **严格遵循**: 所有代码必须遵循注释规范
2. **同步更新**: 代码变更时必须同步更新注释
3. **质量检查**: 通过工具自动检查注释质量
4. **示例完整**: 复杂方法必须提供完整的使用示例
5. **文档同步**: 注释变更必须同步更新相关文档

**记住: 好的注释是代码可维护性的重要保障，必须认真对待每一个注释。**
# 依赖清理规范

## 🎯 依赖管理原则

### 1. 依赖清理目标
- **零冗余**: 消除所有未使用的依赖
- **最小化**: 只保留必要的依赖
- **版本统一**: 确保依赖版本一致性
- **安全优先**: 定期更新依赖，修复安全漏洞

### 2. 依赖分类管理
- **生产依赖**: 运行时必需的依赖
- **开发依赖**: 开发时使用的依赖
- **对等依赖**: 需要宿主环境提供的依赖
- **可选依赖**: 可选的增强功能依赖

## 📋 依赖清理规范

### 1. 导入清理标准

#### 导入顺序规范
```typescript
// ✅ 正确的导入顺序
// 1. React相关
import React, { useState, useEffect, useCallback } from 'react'

// 2. Next.js相关
import { NextPage, GetServerSideProps } from 'next'
import { useRouter } from 'next/router'

// 3. 第三方库 (按字母顺序)
import { Button } from '@/components/ui/button'
import { Card } from '@/components/ui/card'
import { toast } from 'react-hot-toast'

// 4. 内部模块 (按路径深度)
import { useAuth } from '@/hooks/useAuth'
import { UserService } from '@/lib/services/user-service'
import { formatDate } from '@/lib/utils/date-utils'

// 5. 类型导入
import type { User, UserProps } from '@/types/user'
```

#### 重复导入清理
```typescript
// ❌ 不好的导入 - 重复导入
import React, { useState, useEffect, useState } from 'react' // 重复导入useState
import { Button } from '@/components/ui/button'
import { Card } from '@/components/ui/card'
import { Button } from '@/components/ui/button' // 重复导入Button

// ✅ 好的导入 - 无重复
import React, { useState, useEffect } from 'react'
import { Button, Card } from '@/components/ui'
```

#### 未使用导入清理
```typescript
// ❌ 不好的导入 - 未使用的导入
import React, { useState, useEffect, useCallback } from 'react'
import { Button, Card, Input } from '@/components/ui' // Input未使用
import { useAuth } from '@/hooks/useAuth' // useAuth未使用
import { formatDate } from '@/lib/utils/date-utils' // formatDate未使用

// ✅ 好的导入 - 只导入使用的
import React, { useState, useEffect } from 'react'
import { Button, Card } from '@/components/ui'
```

### 2. 依赖包清理

#### package.json清理
```json
{
  "dependencies": {
    // ✅ 生产依赖 - 运行时必需
    "next": "15.2.4",
    "react": "18.2.0",
    "react-dom": "18.2.0",
    "typescript": "5.0.0",
    "postgresql": "3.0.0",
    "sequelize": "6.35.0"
  },
  "devDependencies": {
    // ✅ 开发依赖 - 开发时使用
    "@types/react": "18.2.0",
    "@types/node": "20.0.0",
    "eslint": "8.0.0",
    "prettier": "3.0.0",
    "jest": "29.0.0",
    "playwright": "1.40.0"
  },
  "peerDependencies": {
    // ✅ 对等依赖 - 需要宿主环境提供
    "react": ">=18.0.0",
    "react-dom": ">=18.0.0"
  }
}
```

#### 依赖版本管理
```json
{
  "dependencies": {
    // ✅ 固定版本 - 确保一致性
    "next": "15.2.4",
    "react": "18.2.0",
    
    // ✅ 范围版本 - 允许补丁更新
    "typescript": "~5.0.0",
    "eslint": "^8.0.0",
    
    // ❌ 避免 - 过于宽泛的版本范围
    "some-package": "*",
    "another-package": ">=1.0.0"
  }
}
```

### 3. 代码清理标准

#### 未使用变量清理
```typescript
// ❌ 不好的代码 - 未使用的变量
function processUserData(userData: UserData) {
  const processedData = userData // 未使用
  const tempData = userData.name // 未使用
  const result = userData.id // 未使用
  
  return userData
}

// ✅ 好的代码 - 清理未使用变量
function processUserData(userData: UserData) {
  return userData
}
```

#### 未使用函数清理
```typescript
// ❌ 不好的代码 - 未使用的函数
function unusedFunction() {
  return 'unused'
}

function processData(data: any) {
  // 实际使用的函数
  return data
}

// ✅ 好的代码 - 删除未使用函数
function processData(data: any) {
  return data
}
```

#### 未使用类型清理
```typescript
// ❌ 不好的代码 - 未使用的类型
interface UnusedInterface {
  name: string
  age: number
}

interface UsedInterface {
  id: string
  value: string
}

// ✅ 好的代码 - 删除未使用类型
interface UsedInterface {
  id: string
  value: string
}
```

## 🛠️ 依赖清理工具

### 1. ESLint配置
```json
{
  "rules": {
    "no-unused-vars": "error",
    "no-unused-imports": "error",
    "@typescript-eslint/no-unused-vars": "error",
    "@typescript-eslint/no-unused-imports": "error",
    "import/no-unused-modules": "error"
  }
}
```

### 2. 依赖检查脚本
```typescript
// scripts/check-dependencies.ts
import { execSync } from 'child_process'
import fs from 'fs'
import path from 'path'

interface DependencyInfo {
  name: string
  version: string
  used: boolean
  files: string[]
}

class DependencyChecker {
  private packageJson: any
  private dependencies: DependencyInfo[] = []

  constructor() {
    this.packageJson = JSON.parse(
      fs.readFileSync('package.json', 'utf-8')
    )
    this.loadDependencies()
  }

  private loadDependencies() {
    const allDeps = {
      ...this.packageJson.dependencies,
      ...this.packageJson.devDependencies
    }

    this.dependencies = Object.entries(allDeps).map(([name, version]) => ({
      name,
      version: version as string,
      used: false,
      files: []
    }))
  }

  async checkUsage() {
    console.log('🔍 检查依赖使用情况...')
    
    for (const dep of this.dependencies) {
      const usage = await this.findUsage(dep.name)
      dep.used = usage.length > 0
      dep.files = usage
    }

    this.reportResults()
  }

  private async findUsage(depName: string): Promise<string[]> {
    try {
      const result = execSync(
        `grep -r "from ['\"]${depName}['\"]" src/ --include="*.ts" --include="*.tsx" || true`,
        { encoding: 'utf-8' }
      )
      return result.trim().split('\n').filter(line => line.length > 0)
    } catch {
      return []
    }
  }

  private reportResults() {
    const unused = this.dependencies.filter(dep => !dep.used)
    
    if (unused.length === 0) {
      console.log('✅ 所有依赖都在使用中')
      return
    }

    console.log('❌ 发现未使用的依赖:')
    unused.forEach(dep => {
      console.log(`  - ${dep.name}@${dep.version}`)
    })

    console.log('\n建议操作:')
    console.log('1. 检查这些依赖是否真的不需要')
    console.log('2. 如果不需要，请从package.json中移除')
    console.log('3. 运行 npm install 更新依赖')
  }
}

// 运行检查
new DependencyChecker().checkUsage()
```

### 3. 自动清理脚本
```typescript
// scripts/cleanup-dependencies.ts
import { execSync } from 'child_process'
import fs from 'fs'

class DependencyCleanup {
  async cleanup() {
    console.log('🧹 开始清理依赖...')
    
    // 1. 清理node_modules
    await this.cleanNodeModules()
    
    // 2. 清理package-lock.json
    await this.cleanPackageLock()
    
    // 3. 重新安装依赖
    await this.reinstallDependencies()
    
    // 4. 检查未使用的依赖
    await this.checkUnusedDependencies()
    
    console.log('✅ 依赖清理完成')
  }

  private async cleanNodeModules() {
    console.log('🗑️ 清理node_modules...')
    try {
      execSync('rm -rf node_modules', { stdio: 'inherit' })
    } catch (error) {
      console.error('清理node_modules失败:', error)
    }
  }

  private async cleanPackageLock() {
    console.log('🗑️ 清理package-lock.json...')
    try {
      execSync('rm -f package-lock.json', { stdio: 'inherit' })
    } catch (error) {
      console.error('清理package-lock.json失败:', error)
    }
  }

  private async reinstallDependencies() {
    console.log('📦 重新安装依赖...')
    try {
      execSync('npm install', { stdio: 'inherit' })
    } catch (error) {
      console.error('重新安装依赖失败:', error)
    }
  }

  private async checkUnusedDependencies() {
    console.log('🔍 检查未使用的依赖...')
    try {
      execSync('npx depcheck', { stdio: 'inherit' })
    } catch (error) {
      console.error('检查未使用依赖失败:', error)
    }
  }
}

// 运行清理
new DependencyCleanup().cleanup()
```

## 📊 依赖质量指标

### 依赖质量要求
- **未使用依赖率**: 目标 0%
- **重复依赖率**: 目标 0%
- **过时依赖率**: 目标 < 10%
- **安全漏洞数**: 目标 0

### 检查命令
```bash
# 检查未使用的依赖
npm run check:dependencies

# 清理依赖
npm run clean:dependencies

# 更新依赖
npm run update:dependencies

# 安全审计
npm audit

# 修复安全漏洞
npm audit fix
```

## 🔧 依赖管理最佳实践

### 1. 依赖选择原则
```typescript
// ✅ 优先选择
// 1. 官方维护的包
import { Button } from '@mui/material' // 官方UI库

// 2. 社区活跃的包
import { z } from 'zod' // 活跃的验证库

// 3. 类型支持好的包
import { PrismaClient } from '@prisma/client' // 类型安全

// ❌ 避免选择
// 1. 长时间未更新的包
// 2. 安全漏洞多的包
// 3. 功能重复的包
```

### 2. 依赖版本管理
```json
{
  "dependencies": {
    // ✅ 生产依赖 - 固定版本
    "next": "15.2.4",
    "react": "18.2.0",
    
    // ✅ 工具库 - 范围版本
    "lodash": "^4.17.21",
    "moment": "~2.29.4"
  },
  "devDependencies": {
    // ✅ 开发工具 - 最新版本
    "eslint": "^8.0.0",
    "prettier": "^3.0.0"
  }
}
```

### 3. 依赖更新策略
```bash
# 1. 检查过时的依赖
npm outdated

# 2. 更新补丁版本
npm update

# 3. 更新次要版本
npm install package@latest

# 4. 更新主要版本（谨慎）
npm install package@^2.0.0
```

## 📋 依赖清理检查清单

### 代码清理检查
- [ ] 删除未使用的导入
- [ ] 删除未使用的变量
- [ ] 删除未使用的函数
- [ ] 删除未使用的类型
- [ ] 删除未使用的常量

### 依赖包清理检查
- [ ] 删除未使用的依赖包
- [ ] 合并重复的依赖包
- [ ] 更新过时的依赖包
- [ ] 修复安全漏洞
- [ ] 优化依赖版本范围

### 配置文件清理检查
- [ ] 清理package.json
- [ ] 清理tsconfig.json
- [ ] 清理eslint配置
- [ ] 清理prettier配置
- [ ] 清理其他配置文件

## ⚠️ 重要提醒

1. **定期清理**: 每周进行一次依赖清理
2. **安全优先**: 及时修复安全漏洞
3. **版本控制**: 谨慎更新主要版本
4. **测试验证**: 更新依赖后必须测试
5. **文档同步**: 依赖变更必须更新文档

**记住: 保持依赖的清洁和最新是项目健康的重要保障。**
---
alwaysApply: true
trigger: always_on
---

# 🔄 开发工作流程规范

## 🎯 核心原则

### 1. 规则驱动开发
- **开发前必读**: 每次开发前必须阅读PROJECT_RULES.md
- **规则检查**: 使用`npm run check-rules`验证规则执行
- **质量优先**: 确保代码质量达到生产级别标准
- **持续改进**: 根据规则执行情况持续优化

## 📋 开发前检查清单

### 1. 规则阅读检查
- [ ] 已阅读 [PROJECT_RULES.md](../PROJECT_RULES.md)
- [ ] 确认使用成熟组件库 (shadcn/ui > Ant Design > Radix UI)
- [ ] 评估自定义代码占比 < 20%
- [ ] 确认测试覆盖率 ≥ 80%
- [ ] 验证安全规范遵循

### 2. 环境准备检查
- [ ] 环境配置正确
- [ ] 依赖安装完整
- [ ] 数据库连接正常
- [ ] 开发工具配置正确

### 3. 代码质量检查
- [ ] TypeScript严格模式启用
- [ ] ESLint配置正确
- [ ] Prettier配置正确
- [ ] 测试环境准备就绪

## 🔄 开发工作流程

### 1. 需求分析阶段
```typescript
// 需求分析检查清单
- [ ] 明确功能需求
- [ ] 识别技术难点
- [ ] 评估现有组件库支持
- [ ] 确定自定义代码范围
- [ ] 规划测试策略
- [ ] 评估性能影响
```

### 2. 设计阶段
```typescript
// 设计阶段检查清单
- [ ] UI设计符合设计系统
- [ ] 组件设计基于成熟库
- [ ] API设计遵循RESTful规范
- [ ] 数据库设计规范化
- [ ] 错误处理策略明确
- [ ] 安全考虑周全
```

### 3. 开发阶段
```typescript
// 开发阶段检查清单
- [ ] 环境配置正确
- [ ] 使用成熟组件库
- [ ] 自定义代码占比 < 20%
- [ ] 单元测试覆盖 > 80%
- [ ] 代码注释完整
- [ ] 错误处理完善
```

### 4. 测试阶段
```typescript
// 测试阶段检查清单
- [ ] 单元测试覆盖率 > 80%
- [ ] 集成测试覆盖率 > 60%
- [ ] 端到端测试通过
- [ ] 性能测试通过
- [ ] 安全测试通过
- [ ] 无障碍测试通过
```

### 5. 部署阶段
```typescript
// 部署阶段检查清单
- [ ] 构建成功
- [ ] 环境配置正确
- [ ] 健康检查通过
- [ ] 监控配置完成
- [ ] 文档更新完成
- [ ] 回滚计划准备
```

## 🔍 规则检查机制

### 1. 自动化检查命令
```bash
# 运行所有规则检查
npm run check-rules

# 检查代码质量
npm run check-code

# 检查自定义代码占比
npm run check:custom-ratio

# 检查环境配置
npm run check:config

# 检查数据库连接
npm run check:db
```

### 2. 开发过程中检查
```typescript
// 组件开发时检查
- [ ] 优先使用shadcn/ui组件
- [ ] 复杂组件使用Ant Design
- [ ] 无障碍组件使用Radix UI
- [ ] 避免重复造轮子
- [ ] 自定义代码占比 < 20%

// API开发时检查
- [ ] 统一响应格式
- [ ] 统一错误处理
- [ ] 使用Zod验证
- [ ] 遵循RESTful规范
- [ ] 安全验证完善

// 测试编写时检查
- [ ] 单元测试覆盖率 > 80%
- [ ] 集成测试覆盖率 > 60%
- [ ] 关键业务逻辑覆盖率 > 90%
- [ ] 覆盖边界条件和异常情况
- [ ] 测试用例清晰可读
```

### 3. 代码提交前检查
```typescript
// 提交前检查清单
- [ ] 代码质量检查通过
- [ ] 自定义代码占比 < 20%
- [ ] 测试覆盖率达标
- [ ] 规则一致性验证
- [ ] 性能指标检查
- [ ] 安全扫描通过
- [ ] 代码审查通过
```

## 📚 规则引用指南

### 1. 开发过程中必须引用
```typescript
// 组件开发前引用
/**
 * 组件开发规则引用:
 * 1. 优先使用 shadcn/ui 组件
 * 2. 复杂业务组件使用 Ant Design
 * 3. 自定义代码占比 < 20%
 * 4. 遵循单一职责原则
 * 
 * @see PROJECT_RULES.md - 组件库使用规范
 */

// API开发前引用
/**
 * API开发规则引用:
 * 1. 统一响应格式
 * 2. 统一错误处理
 * 3. 使用Zod验证
 * 4. 遵循RESTful规范
 * 
 * @see PROJECT_RULES.md - 代码质量规范
 */

// 测试编写前引用
/**
 * 测试编写规则引用:
 * 1. 单元测试覆盖率 ≥ 80%
 * 2. 集成测试覆盖率 ≥ 60%
 * 3. 关键业务逻辑覆盖率 ≥ 90%
 * 4. 覆盖边界条件和异常情况
 * 
 * @see PROJECT_RULES.md - 测试规范
 */
```

### 2. 规则更新流程
```typescript
// 规则更新流程
1. 规则变更必须经过团队评审
2. 更新PROJECT_RULES.md文档
3. 更新.cursor/rules/目录下的规则文件
4. 通知所有开发人员
5. 更新相关检查脚本
6. 验证规则执行效果
7. 记录变更日志
```

## 🚨 常见违规情况

### 1. 组件库使用违规
```typescript
// ❌ 错误：自定义基础按钮
function CustomButton() {
  return <button className="custom-btn">Click me</button>
}

// ✅ 正确：使用shadcn/ui组件
import { Button } from '@/components/ui/button'
function MyButton() {
  return <Button>Click me</Button>
}
```

### 2. TypeScript使用违规
```typescript
// ❌ 错误：使用any类型
function processData(data: any) {
  return data.someProperty
}

// ✅ 正确：使用严格类型
interface DataType {
  someProperty: string
}
function processData(data: DataType) {
  return data.someProperty
}
```

### 3. 错误处理违规
```typescript
// ❌ 错误：没有错误处理
async function fetchData() {
  const response = await fetch('/api/data')
  return response.json()
}

// ✅ 正确：统一错误处理
async function fetchData() {
  try {
    const response = await fetch('/api/data')
    if (!response.ok) {
      throw new ApiError('FETCH_FAILED', 'Failed to fetch data', response.status)
    }
    return response.json()
  } catch (error) {
    return handleError(error)
  }
}
```

## 📊 质量指标监控

### 1. 代码质量指标
```typescript
// 质量指标要求
- 自定义代码占比: < 20%
- 单元测试覆盖率: ≥ 80%
- 集成测试覆盖率: ≥ 60%
- 关键业务逻辑覆盖率: ≥ 90%
- 代码重复率: < 3%
- 圈复杂度: < 10
```

### 2. 性能指标
```typescript
// 性能指标要求
- 首屏加载时间: < 3秒
- API响应时间: < 500ms
- 内存使用率: < 80%
- 包体积增长: < 10%
```

### 3. 监控命令
```bash
# 检查代码质量
npm run check-code

# 检查自定义代码占比
npm run check:custom-ratio

# 检查测试覆盖率
npm run test:coverage

# 检查性能指标
npm run test:performance
```

## 🎯 规则执行目标

### 1. 短期目标
- 所有开发人员严格遵守项目规则
- 代码质量达到生产级别标准
- 测试覆盖率全面达标
- 规则检查自动化完成

### 2. 中期目标
- 建立规则执行监控体系
- 持续优化规则内容
- 提升团队规则执行效率
- 建立规则培训体系

### 3. 长期目标
- 规则成为团队文化的一部分
- 项目质量持续提升
- 开发效率显著提高
- 成为行业标杆项目

## ⚠️ 重要提醒

1. **规则优先**: 所有开发工作都必须严格遵守项目规则
2. **质量至上**: 确保代码质量达到生产级别标准
3. **持续改进**: 根据规则执行情况持续优化
4. **团队协作**: 确保所有团队成员都了解并遵守规则
5. **工具支持**: 充分利用自动化检查工具

**记住: 规则不是限制，而是保障。严格遵守规则，确保项目高质量交付！**
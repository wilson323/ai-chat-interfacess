---
description:
globs:
alwaysApply: false
---
# NeuroGlass AI Chat Interface - 项目规则与指导

## 项目概述

NeuroGlass AI Chat Interface 是一个企业级多智能体对话平台，专为安防行业设计。系统集成了多种专业智能体类型，支持多模态交互，提供完整的用户和管理员界面。

### 核心技术栈
- **前端**: Next.js 15.2.4 (App Router) + React + TypeScript + shadcn/ui + Tailwind CSS
- **后端**: Node.js + PostgreSQL + Sequelize ORM
- **部署**: Docker + Docker Compose
- **测试**: Playwright + Jest

## 开发核心理念

```mermaid
mindmap
  root((开发核心理念))
    全链路真实落地
      ::icon(fa fa-check-circle)
      无mock实现
      真实数据库交互
      全流程数据校验
    代码质量至上
      ::icon(fa fa-code)
      严格代码审查
      高测试覆盖率
      持续重构优化
    文档驱动开发
      ::icon(fa fa-file-text)
      实时文档更新
      设计先于实现
      变更必须记录
    用户体验优先
      ::icon(fa fa-user)
      响应速度优化
      直观操作流程
      有效错误反馈
    安全与稳定性
      ::icon(fa fa-shield)
      异常处理完善
      安全最佳实践
      可靠性保障
```

## 项目架构原则

### 1. 目录结构规范
```
ai-chat-interface/
├── app/                    # Next.js App Router
│   ├── admin/             # 管理员界面
│   ├── api/               # API路由
│   └── user/              # 用户界面
├── components/            # React组件
│   ├── admin/            # 管理员组件
│   ├── ui/               # 基础UI组件
│   └── user/             # 用户组件
├── lib/                  # 核心库
│   ├── api/              # API客户端
│   ├── db/               # 数据库模型
│   ├── services/         # 业务服务
│   └── utils/            # 工具函数
├── types/                # TypeScript类型定义
├── context/              # React Context
├── hooks/                # 自定义Hooks
└── migrations/           # 数据库迁移
```

### 2. 智能体类型
- **FastGPT**: 基于FastGPT API的通用对话智能体
- **CAD分析器**: 专业的CAD图纸分析和安防设备布局优化
- **图像编辑器**: 图像处理和编辑功能

### 3. 核心功能模块

#### 用户端功能（无需登录）
- **统一对话界面**: 单一界面支持多种智能体类型切换
- **智能体类型**:
  - FastGPT对话智能体：标准聊天界面
  - CAD解读智能体：文件上传+分析界面
- **设备识别**: 自动生成设备唯一ID存储到localStorage
- **会话管理**: 每次新建对话生成唯一会话ID
- **流式交互**: 实时显示智能体节点状态和操作按钮
- **数据透传**: 所有对话记录存储在FastGPT，本系统仅透传

#### 管理员端功能（需登录）
- **智能体管理**: 
  - 新增FastGPT对话智能体（AppID+密钥配置）
  - 配置CAD解读智能体（选择AI大模型）
- **AI模型仓库**:
  - NLP模型管理（阿里千问/硅基模型）
  - 多模态模型配置
  - 语音模型配置（TTS/ASR）
- **数据监控**: 全国IP请求热点地图，按智能体类型分层显示

## 开发规范

### 1. 代码质量要求
- 所有代码必须通过 ESLint 和 Prettier 检查
- TypeScript 严格模式，禁止使用 any 类型
- 组件必须有完整的 TypeScript 类型定义
- 关键业务逻辑必须有单元测试覆盖

### 2. 提交规范
```
<type>(<scope>): <subject>

<body>

<footer>
```

类型说明：
- **feat**: 新功能
- **fix**: 修复bug
- **docs**: 文档更新
- **style**: 代码格式调整
- **refactor**: 代码重构
- **test**: 测试相关
- **chore**: 构建过程或辅助工具的变动

### 3. 安全规范
- 所有用户输入必须进行验证和清理
- API 接口必须有权限验证
- 敏感数据必须加密存储
- 防止 XSS 和 SQL 注入攻击

### 4. 性能要求
- 页面首次加载时间 < 2秒
- 组件渲染优化，避免不必要的重渲染
- 图片和资源懒加载
- 代码分割和动态导入

## API 设计规范

### 1. RESTful API 标准
- 用户API: `/api/`
- 管理员API: `/api/admin/`

### 2. 响应格式
```typescript
interface ApiResponse<T> {
  success: boolean;
  data?: T;
  error?: string;
  message?: string;
  timestamp: number;
}
```

### 3. 错误处理
- 统一的错误响应格式
- 详细的错误日志记录
- 用户友好的错误提示

## 数据库设计原则

### 1. 核心表结构
- **agent_config**: 智能体配置
- **chat_history**: 聊天历史
- **cad_history**: CAD分析历史

### 2. 数据完整性
- 外键约束确保数据一致性
- 必要字段的非空约束
- 数据类型严格定义

### 3. 性能优化
- 合理的索引设计
- 查询优化
- 数据分页处理

## 测试策略

### 1. 单元测试
- 组件测试覆盖率 > 80%
- 业务逻辑函数必须有测试
- Mock 外部依赖

### 2. 集成测试
- API 接口测试
- 数据库操作测试
- 第三方服务集成测试

### 3. E2E 测试
- 关键用户流程测试
- 跨浏览器兼容性测试
- 移动端适配测试

## 部署和运维

### 1. 容器化部署
- Docker 镜像构建
- Docker Compose 编排
- 环境变量配置

### 2. 监控和日志
- 应用性能监控
- 错误追踪和报警
- 访问日志分析

### 3. 备份和恢复
- 数据库定期备份
- 配置文件版本控制
- 灾难恢复预案

## 最佳实践

### 1. 组件开发
- 单一职责原则
- 可复用性设计
- Props 类型严格定义
- 错误边界处理

### 2. 状态管理
- React Context 用于全局状态
- 本地状态优先使用 useState
- 复杂状态使用 useReducer

### 3. 样式管理
- Tailwind CSS 优先
- 组件样式模块化
- 响应式设计原则
- 主题系统支持

### 4. 国际化
- 所有文本内容支持多语言
- 日期和数字格式本地化
- RTL 语言支持

## 禁止事项

### 1. 代码质量
- ❌ 禁止使用 any 类型
- ❌ 禁止未处理的 Promise
- ❌ 禁止硬编码配置
- ❌ 禁止未注释的复杂逻辑

### 2. 安全相关
- ❌ 禁止明文存储密码
- ❌ 禁止跳过输入验证
- ❌ 禁止暴露敏感信息
- ❌ 禁止使用不安全的依赖

### 3. 性能相关
- ❌ 禁止同步阻塞操作
- ❌ 禁止内存泄漏
- ❌ 禁止过大的 bundle 文件
- ❌ 禁止未优化的图片

## 工作流程

### 1. 功能开发流程
1. 需求分析和设计
2. 技术方案评审
3. 代码实现
4. 单元测试编写
5. 代码审查
6. 集成测试
7. 部署上线

### 2. Bug 修复流程
1. 问题复现
2. 根因分析
3. 修复方案设计
4. 代码修改
5. 测试验证
6. 部署修复

### 3. 版本发布流程
1. 功能冻结
2. 全面测试
3. 文档更新
4. 版本打包
5. 生产部署
6. 监控验证

## 联系信息

- **项目维护者**: NeuroGlass Team
- **技术支持**: support@neuroglass.ai
- **文档更新**: 2024年12月

---

**注意**: 本规则文件是项目开发的重要指导文档，所有团队成员都应严格遵守。如有疑问或建议，请及时与项目负责人沟通。

---
description: 
globs: 
alwaysApply: false
---
# 代码质量管理指南

本文档介绍了项目中使用的代码质量管理工具和流程，帮助团队成员理解和遵循统一的代码规范。

## 工具概览

项目使用以下工具来保证代码质量：

- **Husky**: 用于设置 Git 钩子，在代码提交前自动运行检查
- **lint-staged**: 只对暂存的文件运行检查，提高效率
- **ESLint**: 静态代码分析工具，检查 JavaScript/TypeScript 代码问题
- **Prettier**: 代码格式化工具，确保代码风格一致
- **TypeScript**: 提供类型检查，减少运行时错误

## 自动检查流程

当你尝试提交代码时，会自动触发以下检查：

1. **lint-staged** 会识别你暂存的文件
2. 对 JavaScript/TypeScript 文件运行 **ESLint** 和 **Prettier**
3. 对其他文件（如 JSON、Markdown）运行 **Prettier**
4. 如果检查失败，提交会被阻止，你需要修复问题后再次尝试提交

## 常用命令

以下是一些常用的命令，可以帮助你管理代码质量：

### 安装和设置

```bash
# 安装所有依赖并设置 Husky
npm run setup-husky
```

### 代码检查

```bash
# 运行 ESLint 检查
npm run lint

# 运行 TypeScript 类型检查
npm run check-types

# 运行 Prettier 格式检查
npm run format:check

# 运行全面代码检查
npm run check-code
```

### 自动修复

```bash
# 运行 ESLint 自动修复
npm run lint:fix

# 运行 Prettier 格式化
npm run format

# 运行全面自动修复
npm run fix-code
```

## 常见问题解决

### 提交被阻止

如果你的提交被阻止，请查看控制台输出，了解具体问题。通常你可以：

1. 运行 `npm run fix-code` 尝试自动修复
2. 如果自动修复不能解决所有问题，请手动修复剩余问题
3. 修复后，重新暂存文件并尝试提交

### 临时跳过检查

在特殊情况下，如果你需要临时跳过检查（不推荐），可以使用：

```bash
git commit -m "你的提交信息" --no-verify
```

**注意**：请谨慎使用此选项，并在之后尽快修复代码问题。

### 配置文件

如果需要调整配置，可以修改以下文件：

- ESLint 配置: `.eslintrc.json`
- Prettier 配置: `.prettierrc.json`
- lint-staged 配置: `.lintstagedrc.json`

## 最佳实践

1. **经常提交**：小批量、频繁的提交比大批量的提交更容易通过检查
2. **提交前自检**：在提交前运行 `npm run check-code` 预先发现问题
3. **保持更新**：定期更新依赖，获取最新的规则和修复
4. **学习规则**：了解 ESLint 规则的含义，提高代码质量意识


---
alwaysApply: true
description: 严格禁止脚本修改代码 - 确保代码安全性和稳定性
---

# 🚫 严格禁止脚本修改代码

## 🎯 核心原则

### 1. 代码修改禁令 ⭐⭐⭐
- **禁止脚本修改**: 严格禁止任何脚本自动修改现有代码文件
- **只读操作**: 脚本只能进行读取、分析、检查等只读操作
- **人工确认**: 所有代码修改必须经过人工确认和审查
- **安全优先**: 代码安全性优于自动化便利性

### 2. 脚本操作限制 ⭐⭐⭐
- **只允许检查**: 脚本只能进行代码质量检查、分析、报告
- **禁止写入**: 严格禁止脚本向代码文件写入内容
- **禁止删除**: 严格禁止脚本删除代码文件或内容
- **禁止替换**: 严格禁止脚本替换代码文件内容

## 📋 允许的脚本操作

### 1. 只读检查操作 ✅
```bash
# ✅ 允许：代码质量检查
npm run type:check
npm run lint
npm run test

# ✅ 允许：代码分析
npm run analyze
npm run coverage
npm run performance

# ✅ 允许：配置检查
npm run config:check
npm run db:check
```

### 2. 报告生成操作 ✅
```bash
# ✅ 允许：生成报告
npm run report:quality
npm run report:coverage
npm run report:performance

# ✅ 允许：生成文档
npm run docs:generate
npm run docs:update
```

### 3. 环境检查操作 ✅
```bash
# ✅ 允许：环境检查
npm run env:check
npm run deps:check
npm run security:check
```

## 🚫 严格禁止的脚本操作

### 1. 代码修改操作 ❌
```bash
# ❌ 禁止：自动修复代码
npm run fix:code
npm run auto-fix
npm run refactor:auto

# ❌ 禁止：自动格式化
npm run format:force
npm run prettier:write
```

### 2. 文件操作 ❌
```bash
# ❌ 禁止：创建代码文件
npm run create:component
npm run generate:code
npm run scaffold:auto

# ❌ 禁止：删除代码文件
npm run clean:code
npm run remove:unused
npm run delete:files
```

### 3. 配置修改 ❌
```bash
# ❌ 禁止：修改配置文件
npm run config:update
npm run env:set
npm run settings:change
```

## 🔒 脚本安全规范

### 1. 脚本权限限制
- **只读权限**: 所有脚本只能拥有只读权限
- **无写入权限**: 严格禁止脚本获得文件写入权限
- **无删除权限**: 严格禁止脚本获得文件删除权限
- **无执行权限**: 严格禁止脚本执行系统命令

### 2. 脚本内容检查
```typescript
// ❌ 禁止：文件写入操作
import { writeFileSync } from 'fs'
writeFileSync('file.ts', 'content') // 严格禁止

// ❌ 禁止：文件删除操作
import { unlinkSync } from 'fs'
unlinkSync('file.ts') // 严格禁止

// ❌ 禁止：文件修改操作
import { appendFileSync } from 'fs'
appendFileSync('file.ts', 'content') // 严格禁止

// ✅ 允许：文件读取操作
import { readFileSync } from 'fs'
const content = readFileSync('file.ts', 'utf-8') // 允许
```

### 3. 脚本验证机制
```typescript
// ✅ 脚本安全检查
function validateScriptSafety(scriptPath: string): boolean {
  const content = readFileSync(scriptPath, 'utf-8')
  
  // 检查危险操作
  const dangerousOperations = [
    'writeFileSync',
    'writeFile',
    'unlinkSync',
    'unlink',
    'rmdirSync',
    'rmdir',
    'mkdirSync',
    'mkdir',
    'appendFileSync',
    'appendFile'
  ]
  
  for (const operation of dangerousOperations) {
    if (content.includes(operation)) {
      throw new Error(`禁止使用 ${operation} 操作`)
    }
  }
  
  return true
}
```

## 📊 脚本监控机制

### 1. 脚本执行监控
```typescript
// ✅ 脚本执行日志
interface ScriptExecutionLog {
  scriptName: string
  timestamp: string
  operation: 'read' | 'check' | 'analyze'
  filesAccessed: string[]
  result: 'success' | 'error'
  details: string
}

// ✅ 记录脚本执行
function logScriptExecution(scriptName: string, operation: string) {
  const log: ScriptExecutionLog = {
    scriptName,
    timestamp: new Date().toISOString(),
    operation: 'read',
    filesAccessed: [],
    result: 'success',
    details: 'Script executed safely'
  }
  
  // 记录到日志文件
  console.log(JSON.stringify(log))
}
```

### 2. 违规检测
```typescript
// ✅ 检测违规操作
function detectViolations(scriptPath: string): string[] {
  const violations: string[] = []
  const content = readFileSync(scriptPath, 'utf-8')
  
  // 检查文件写入操作
  if (content.includes('writeFile')) {
    violations.push('检测到文件写入操作')
  }
  
  // 检查文件删除操作
  if (content.includes('unlink')) {
    violations.push('检测到文件删除操作')
  }
  
  // 检查文件修改操作
  if (content.includes('appendFile')) {
    violations.push('检测到文件修改操作')
  }
  
  return violations
}
```

## 🛡️ 安全防护措施

### 1. 脚本权限控制
```json
// package.json - 脚本权限控制
{
  "scripts": {
    "type:check": "tsx scripts/check-type-safety.ts",
    "lint:check": "eslint . --ext .ts,.tsx",
    "test:run": "jest",
    "analyze:code": "tsx scripts/analyze-code.ts"
  },
  "permissions": {
    "scripts": {
      "read-only": true,
      "no-write": true,
      "no-delete": true,
      "no-execute": true
    }
  }
}
```

### 2. 文件系统保护
```typescript
// ✅ 文件系统保护
class FileSystemProtection {
  private static readonly READ_ONLY_OPERATIONS = [
    'readFileSync',
    'readFile',
    'readdirSync',
    'readdir',
    'statSync',
    'stat',
    'existsSync',
    'exists'
  ]
  
  private static readonly FORBIDDEN_OPERATIONS = [
    'writeFileSync',
    'writeFile',
    'unlinkSync',
    'unlink',
    'rmdirSync',
    'rmdir',
    'mkdirSync',
    'mkdir',
    'appendFileSync',
    'appendFile'
  ]
  
  static validateOperation(operation: string): boolean {
    if (this.FORBIDDEN_OPERATIONS.includes(operation)) {
      throw new Error(`禁止使用 ${operation} 操作`)
    }
    return this.READ_ONLY_OPERATIONS.includes(operation)
  }
}
```

## 📝 脚本开发规范

### 1. 脚本模板
```typescript
// ✅ 安全的脚本模板
#!/usr/bin/env tsx

/**
 * 脚本名称 - 只读操作
 * 严格遵循：禁止修改代码文件
 */

import { readFileSync, readdirSync, statSync } from 'fs'
import { join, extname } from 'path'

class SafeScript {
  /**
   * 只读操作：读取文件内容
   */
  private readFile(filePath: string): string {
    try {
      return readFileSync(filePath, 'utf-8')
    } catch (error) {
      console.error(`无法读取文件 ${filePath}:`, error)
      return ''
    }
  }
  
  /**
   * 只读操作：扫描目录
   */
  private scanDirectory(dirPath: string): string[] {
    // 只读操作，不修改任何文件
    const files: string[] = []
    // ... 实现逻辑
    return files
  }
  
  /**
   * 只读操作：生成报告
   */
  public generateReport(): void {
    // 只生成报告，不修改代码
    console.log('生成分析报告...')
  }
}

// 主函数
function main() {
  const script = new SafeScript()
  script.generateReport()
}

if (require.main === module) {
  main()
}
```

### 2. 脚本检查清单
- [ ] 脚本只包含只读操作
- [ ] 没有文件写入操作
- [ ] 没有文件删除操作
- [ ] 没有文件修改操作
- [ ] 没有系统命令执行
- [ ] 只生成报告和分析结果

## 🚨 违规处理

### 1. 违规检测
```typescript
// ✅ 违规检测脚本
function checkScriptViolations() {
  const scripts = [
    'scripts/check-type-safety.ts',
    'scripts/analyze-code.ts',
    'scripts/generate-report.ts'
  ]
  
  for (const script of scripts) {
    const violations = detectViolations(script)
    if (violations.length > 0) {
      console.error(`脚本 ${script} 存在违规操作:`)
      violations.forEach(violation => {
        console.error(`  - ${violation}`)
      })
      process.exit(1)
    }
  }
}
```

### 2. 违规处理流程
1. **检测违规**: 自动检测脚本中的违规操作
2. **阻止执行**: 立即阻止违规脚本的执行
3. **记录日志**: 记录违规操作到日志文件
4. **通知团队**: 通知开发团队违规情况
5. **修复脚本**: 要求修复违规脚本

## 📚 最佳实践

### 1. 脚本开发原则
- **只读优先**: 优先使用只读操作
- **安全第一**: 安全性优于便利性
- **人工确认**: 重要操作需要人工确认
- **文档完整**: 脚本必须有完整的文档

### 2. 脚本使用规范
- **定期检查**: 定期检查脚本安全性
- **权限控制**: 严格控制脚本权限
- **监控执行**: 监控脚本执行过程
- **及时修复**: 及时修复发现的问题

## ⚠️ 重要提醒

1. **严格禁止**: 任何脚本都不能修改代码文件
2. **只读操作**: 脚本只能进行读取、分析、检查操作
3. **人工确认**: 所有代码修改必须经过人工确认
4. **安全优先**: 代码安全性是最高优先级

---

## 🎯 总结

本规则严格禁止脚本修改代码，确保：

1. **代码安全**: 防止脚本意外修改或删除代码
2. **系统稳定**: 避免脚本操作导致系统不稳定
3. **人工控制**: 所有代码修改必须经过人工审查
4. **质量保障**: 确保代码修改的质量和正确性

**记住**: 脚本只能读取和分析，绝不能修改代码！所有代码修改必须经过人工确认和审查！